
GSR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ce2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000ce2  00000d76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006c  0080006c  00000d82  2**0
                  ALLOC
  3 .stab         000016d4  00000000  00000000  00000d84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eac  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 8a 04 	jmp	0x914	; 0x914 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d2 05 	call	0xba4	; 0xba4 <main>
  8a:	0c 94 6f 06 	jmp	0xcde	; 0xcde <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:
/****************************************************************/



void ADC_voidInit (void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62

	
	else if (VOLTAGE_REFERENCE == AVCC)
	{

		SET_BIT( ADMUX , 6 );
  9a:	a7 e2       	ldi	r26, 0x27	; 39
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e7 e2       	ldi	r30, 0x27	; 39
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	8c 93       	st	X, r24
		CLEAR_BIT( ADMUX , 7 );
  a8:	a7 e2       	ldi	r26, 0x27	; 39
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	e7 e2       	ldi	r30, 0x27	; 39
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	8f 77       	andi	r24, 0x7F	; 127
  b4:	8c 93       	st	X, r24

	/*  ( if / else if ) condition for Macros */
	#if ADJUSTMENT == LEFT_ADJUSTMENT
	SET_BIT( ADMUX , 5 );
	#elif ADJUSTMENT == RIGHT_ADJUSTMENT
	CLEAR_BIT( ADMUX , 5 );
  b6:	a7 e2       	ldi	r26, 0x27	; 39
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	e7 e2       	ldi	r30, 0x27	; 39
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8f 7d       	andi	r24, 0xDF	; 223
  c2:	8c 93       	st	X, r24
	/* End ( if ) condition for Macros */


	/*  ( if / else if ) condition for Macros */
	#if ADC_CHANNEL_NUMBER == DIO_u8_PIN_0
	CLEAR_BIT( ADMUX , 0 );
  c4:	a7 e2       	ldi	r26, 0x27	; 39
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	e7 e2       	ldi	r30, 0x27	; 39
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	8c 93       	st	X, r24
	CLEAR_BIT( ADMUX , 1 );
  d2:	a7 e2       	ldi	r26, 0x27	; 39
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e7 e2       	ldi	r30, 0x27	; 39
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	8d 7f       	andi	r24, 0xFD	; 253
  de:	8c 93       	st	X, r24
	CLEAR_BIT( ADMUX , 2 );
  e0:	a7 e2       	ldi	r26, 0x27	; 39
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e7 e2       	ldi	r30, 0x27	; 39
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	8b 7f       	andi	r24, 0xFB	; 251
  ec:	8c 93       	st	X, r24
	CLEAR_BIT( ADMUX , 3 );
  ee:	a7 e2       	ldi	r26, 0x27	; 39
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e7 e2       	ldi	r30, 0x27	; 39
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	87 7f       	andi	r24, 0xF7	; 247
  fa:	8c 93       	st	X, r24
	CLEAR_BIT( ADMUX , 4 );
  fc:	a7 e2       	ldi	r26, 0x27	; 39
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	e7 e2       	ldi	r30, 0x27	; 39
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	8f 7e       	andi	r24, 0xEF	; 239
 108:	8c 93       	st	X, r24

	
	
	/** disable ADC in initialization function  			   **/
	/** like : void ADC_voidDisable(); 		 				   **/
	CLEAR_BIT( ADCSRA , 7 );
 10a:	a6 e2       	ldi	r26, 0x26	; 38
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	e6 e2       	ldi	r30, 0x26	; 38
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8f 77       	andi	r24, 0x7F	; 127
 116:	8c 93       	st	X, r24

	

	/** disable ADC Auto Trigger in initialization function	   **/
	/** ADATE = 0 =====> 	CLEAR_BIT( ADATE , 5 );			   **/
	CLEAR_BIT( ADCSRA , 5 );
 118:	a6 e2       	ldi	r26, 0x26	; 38
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e6 e2       	ldi	r30, 0x26	; 38
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	8f 7d       	andi	r24, 0xDF	; 223
 124:	8c 93       	st	X, r24

	
	/** ADIF = 1 =====> 	SET_BIT( ADIF , 4 ); 			   **/
	/** ADC Interrupt Flag ( Conversion Complete ) cleared by  **/
	/** set ADIF by Logical 1 .								   **/
    SET_BIT( ADCSRA , 4 );
 126:	a6 e2       	ldi	r26, 0x26	; 38
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	e6 e2       	ldi	r30, 0x26	; 38
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 61       	ori	r24, 0x10	; 16
 132:	8c 93       	st	X, r24
	
	/** ADIE = 0 =====> 	CLEAR_BIT( ADIF , 4 ); 			   **/
	/** ADC Interrupt Enable is cleared in initialization	   **/
    CLEAR_BIT( ADCSRA , 3 );	
 134:	a6 e2       	ldi	r26, 0x26	; 38
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e6 e2       	ldi	r30, 0x26	; 38
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	87 7f       	andi	r24, 0xF7	; 247
 140:	8c 93       	st	X, r24
	SET_BIT( ADCSRA , 0 );
	CLEAR_BIT( ADCSRA , 1 );
	SET_BIT( ADCSRA , 2 );

	#elif ADC_PRESCALLER == DIVID_BY_64
	CLEAR_BIT( ADCSRA , 0 );
 142:	a6 e2       	ldi	r26, 0x26	; 38
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	e6 e2       	ldi	r30, 0x26	; 38
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	8c 93       	st	X, r24
	SET_BIT( ADCSRA , 1 );
 150:	a6 e2       	ldi	r26, 0x26	; 38
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	e6 e2       	ldi	r30, 0x26	; 38
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	8c 93       	st	X, r24
	SET_BIT( ADCSRA , 2 );
 15e:	a6 e2       	ldi	r26, 0x26	; 38
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	e6 e2       	ldi	r30, 0x26	; 38
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	84 60       	ori	r24, 0x04	; 4
 16a:	8c 93       	st	X, r24
	
	#endif
	/* End ( if ) condition for Macros */	
	
	
}
 16c:	cf 91       	pop	r28
 16e:	df 91       	pop	r29
 170:	08 95       	ret

00000172 <ADC_voidEnable>:
/* Pre_condition  :  this function must be used after ADC		*/
/*     				 initialized 							    */
/****************************************************************/

void ADC_voidEnable()
{
 172:	df 93       	push	r29
 174:	cf 93       	push	r28
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT( ADCSRA , 7 );
 17a:	a6 e2       	ldi	r26, 0x26	; 38
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	e6 e2       	ldi	r30, 0x26	; 38
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	80 68       	ori	r24, 0x80	; 128
 186:	8c 93       	st	X, r24
	
}
 188:	cf 91       	pop	r28
 18a:	df 91       	pop	r29
 18c:	08 95       	ret

0000018e <ADC_voidInterrputEnable>:
/* Pre_condition  :  this function must be used after ADC		*/
/*     				 initialized 							    */
/****************************************************************/

void ADC_voidInterrputEnable()
{
 18e:	df 93       	push	r29
 190:	cf 93       	push	r28
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62

	
	SET_BIT( ADCSRA , 3 );
 196:	a6 e2       	ldi	r26, 0x26	; 38
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	e6 e2       	ldi	r30, 0x26	; 38
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	88 60       	ori	r24, 0x08	; 8
 1a2:	8c 93       	st	X, r24
	
}
 1a4:	cf 91       	pop	r28
 1a6:	df 91       	pop	r29
 1a8:	08 95       	ret

000001aa <ADC_voidDisable>:
/* Pre_condition  :  this function must be used after ADC 		*/
/*     				 initialized 							    */
/****************************************************************/

void ADC_voidDisable()
{
 1aa:	df 93       	push	r29
 1ac:	cf 93       	push	r28
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
	
	CLEAR_BIT( ADCSRA , 7 );
 1b2:	a6 e2       	ldi	r26, 0x26	; 38
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	e6 e2       	ldi	r30, 0x26	; 38
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	8f 77       	andi	r24, 0x7F	; 127
 1be:	8c 93       	st	X, r24
	
}
 1c0:	cf 91       	pop	r28
 1c2:	df 91       	pop	r29
 1c4:	08 95       	ret

000001c6 <ADC_voidStartConversion>:
/* Pre_condition  :  this function must be used after ADC 		*/
/*     				 initialized 							    */
/****************************************************************/

void ADC_voidStartConversion()
{
 1c6:	df 93       	push	r29
 1c8:	cf 93       	push	r28
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT( ADCSRA , 6 );
 1ce:	a6 e2       	ldi	r26, 0x26	; 38
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	e6 e2       	ldi	r30, 0x26	; 38
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	80 64       	ori	r24, 0x40	; 64
 1da:	8c 93       	st	X, r24
	
}
 1dc:	cf 91       	pop	r28
 1de:	df 91       	pop	r29
 1e0:	08 95       	ret

000001e2 <ADC_voidAutoTrigger>:
/* Pre_condition  :  this function must be used after Interrupt */
/*     				 initialized 							    */
/****************************************************************/

void ADC_voidAutoTrigger()
{
 1e2:	df 93       	push	r29
 1e4:	cf 93       	push	r28
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62

	
	/** Enable ADC Auto Trigger	 							   **/
	/** ADATE = 1 =====> 	SET_BIT( ADATE , 5 ); 			   **/

    SET_BIT( ADCSRA , 5 );
 1ea:	a6 e2       	ldi	r26, 0x26	; 38
 1ec:	b0 e0       	ldi	r27, 0x00	; 0
 1ee:	e6 e2       	ldi	r30, 0x26	; 38
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	80 62       	ori	r24, 0x20	; 32
 1f6:	8c 93       	st	X, r24
	

		/*  ( if / else if ) condition for Macros */
	#if ADC_AUTO_TRIGGER_SOURCE == FREE_RUNNING_MODE 
	CLEAR_BIT( SFIOR , 0 );
 1f8:	a0 e5       	ldi	r26, 0x50	; 80
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	e0 e5       	ldi	r30, 0x50	; 80
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	8e 7f       	andi	r24, 0xFE	; 254
 204:	8c 93       	st	X, r24
	CLEAR_BIT( SFIOR , 1 );
 206:	a0 e5       	ldi	r26, 0x50	; 80
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	e0 e5       	ldi	r30, 0x50	; 80
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	8d 7f       	andi	r24, 0xFD	; 253
 212:	8c 93       	st	X, r24
	CLEAR_BIT( SFIOR , 2 );
 214:	a0 e5       	ldi	r26, 0x50	; 80
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	e0 e5       	ldi	r30, 0x50	; 80
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	8b 7f       	andi	r24, 0xFB	; 251
 220:	8c 93       	st	X, r24
	SET_BIT( SFIOR , 2 );	
	
	#endif
	/* End ( if ) condition for Macros */
	
}
 222:	cf 91       	pop	r28
 224:	df 91       	pop	r29
 226:	08 95       	ret

00000228 <ADC_u16ReadADC>:
/* Pre_condition  :  this function must be used after ADC 		*/
/*     				 initialized 							    */
/****************************************************************/

u16 ADC_u16ReadADC()
{
 228:	df 93       	push	r29
 22a:	cf 93       	push	r28
 22c:	00 d0       	rcall	.+0      	; 0x22e <ADC_u16ReadADC+0x6>
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
	
	u16 mv_result = 0 ;
 232:	1a 82       	std	Y+2, r1	; 0x02
 234:	19 82       	std	Y+1, r1	; 0x01
	ADC_voidStartConversion();
 236:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <ADC_voidStartConversion>
	while(GET_BIT(ADCSRA , 4) == 0);
 23a:	e6 e2       	ldi	r30, 0x26	; 38
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	82 95       	swap	r24
 242:	8f 70       	andi	r24, 0x0F	; 15
 244:	88 2f       	mov	r24, r24
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	81 70       	andi	r24, 0x01	; 1
 24a:	90 70       	andi	r25, 0x00	; 0
 24c:	00 97       	sbiw	r24, 0x00	; 0
 24e:	a9 f3       	breq	.-22     	; 0x23a <ADC_u16ReadADC+0x12>
	SET_BIT(ADCSRA , 4 );
 250:	a6 e2       	ldi	r26, 0x26	; 38
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	e6 e2       	ldi	r30, 0x26	; 38
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	80 61       	ori	r24, 0x10	; 16
 25c:	8c 93       	st	X, r24
	#if ADJUSTMENT == LEFT_ADJUSTMENT
	mv_result = (ADCH);


	#elif ADJUSTMENT == RIGHT_ADJUSTMENT
	mv_result = ( ( (u16)(ADCL) ) | ( (u16)(ADCH<<8) ) );
 25e:	e4 e2       	ldi	r30, 0x24	; 36
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	28 2f       	mov	r18, r24
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	e5 e2       	ldi	r30, 0x25	; 37
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	88 2f       	mov	r24, r24
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	98 2f       	mov	r25, r24
 274:	88 27       	eor	r24, r24
 276:	82 2b       	or	r24, r18
 278:	93 2b       	or	r25, r19
 27a:	9a 83       	std	Y+2, r25	; 0x02
 27c:	89 83       	std	Y+1, r24	; 0x01
	

	#endif

	return mv_result;
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	9a 81       	ldd	r25, Y+2	; 0x02


}
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	cf 91       	pop	r28
 288:	df 91       	pop	r29
 28a:	08 95       	ret

0000028c <DIO_void_Intialization>:
#include "DIO_config.h"
#include "DIO_priv.h"



void DIO_void_Intialization(void){
 28c:	df 93       	push	r29
 28e:	cf 93       	push	r28
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_Directions;
 294:	ea e3       	ldi	r30, 0x3A	; 58
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 ef       	ldi	r24, 0xF0	; 240
 29a:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_Directions;
 29c:	e7 e3       	ldi	r30, 0x37	; 55
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_Directions;
 2a4:	e4 e3       	ldi	r30, 0x34	; 52
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	8f ef       	ldi	r24, 0xFF	; 255
 2aa:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_Directions;
 2ac:	e1 e3       	ldi	r30, 0x31	; 49
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	8e ef       	ldi	r24, 0xFE	; 254
 2b2:	80 83       	st	Z, r24
}
 2b4:	cf 91       	pop	r28
 2b6:	df 91       	pop	r29
 2b8:	08 95       	ret

000002ba <DIO_void_SetPinValue>:




/* Function that set a certain PIN Value as an output with High or Low */
void DIO_void_SetPinValue(u8 PinNumber_u8_cpy, u8 PinValue_u8_cpy){
 2ba:	df 93       	push	r29
 2bc:	cf 93       	push	r28
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <DIO_void_SetPinValue+0x6>
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
 2c4:	89 83       	std	Y+1, r24	; 0x01
 2c6:	6a 83       	std	Y+2, r22	; 0x02
	/*  Here we check the pin number to find in which range it is      */
	
	if(PinNumber_u8_cpy >= PORTA_START && PinNumber_u8_cpy <=PORTA_END){ 
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	88 30       	cpi	r24, 0x08	; 8
 2cc:	80 f5       	brcc	.+96     	; 0x32e <DIO_void_SetPinValue+0x74>
        /* If Pin number is within the PORTA range we check the requested value  */
		
		if(PinValue_u8_cpy == DIO_u8_HIGH){
 2ce:	8a 81       	ldd	r24, Y+2	; 0x02
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	a1 f4       	brne	.+40     	; 0x2fc <DIO_void_SetPinValue+0x42>
			SET_BIT(PORTA, PinNumber_u8_cpy);    //Makes the requested PIN as High
 2d4:	ab e3       	ldi	r26, 0x3B	; 59
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	eb e3       	ldi	r30, 0x3B	; 59
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	48 2f       	mov	r20, r24
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	28 2f       	mov	r18, r24
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 2e       	mov	r0, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_void_SetPinValue+0x38>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	0a 94       	dec	r0
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_void_SetPinValue+0x34>
 2f6:	84 2b       	or	r24, r20
 2f8:	8c 93       	st	X, r24
 2fa:	c2 c0       	rjmp	.+388    	; 0x480 <DIO_void_SetPinValue+0x1c6>
			
		}else if(PinValue_u8_cpy == DIO_u8_LOW){
 2fc:	8a 81       	ldd	r24, Y+2	; 0x02
 2fe:	88 23       	and	r24, r24
 300:	09 f0       	breq	.+2      	; 0x304 <DIO_void_SetPinValue+0x4a>
 302:	be c0       	rjmp	.+380    	; 0x480 <DIO_void_SetPinValue+0x1c6>
			CLEAR_BIT(PORTA, PinNumber_u8_cpy); //Makes the requested PIn as LOW
 304:	ab e3       	ldi	r26, 0x3B	; 59
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	eb e3       	ldi	r30, 0x3B	; 59
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	48 2f       	mov	r20, r24
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	28 2f       	mov	r18, r24
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 2e       	mov	r0, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_void_SetPinValue+0x68>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	0a 94       	dec	r0
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_void_SetPinValue+0x64>
 326:	80 95       	com	r24
 328:	84 23       	and	r24, r20
 32a:	8c 93       	st	X, r24
 32c:	a9 c0       	rjmp	.+338    	; 0x480 <DIO_void_SetPinValue+0x1c6>
			
		}
		
		
	}else if(PinNumber_u8_cpy >= PORTB_START && PinNumber_u8_cpy <= PORTB_END){
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	88 30       	cpi	r24, 0x08	; 8
 332:	b0 f1       	brcs	.+108    	; 0x3a0 <DIO_void_SetPinValue+0xe6>
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	80 31       	cpi	r24, 0x10	; 16
 338:	98 f5       	brcc	.+102    	; 0x3a0 <DIO_void_SetPinValue+0xe6>
		/* If Pin number is within the PORTB range  */
		
		PinNumber_u8_cpy = PinNumber_u8_cpy - PORTA_SIZE;   //Descard PORTA Size to use the PIN within PORTB
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	88 50       	subi	r24, 0x08	; 8
 33e:	89 83       	std	Y+1, r24	; 0x01
		
		if(PinValue_u8_cpy == DIO_u8_HIGH){
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	a1 f4       	brne	.+40     	; 0x36e <DIO_void_SetPinValue+0xb4>
			SET_BIT(PORTB, PinNumber_u8_cpy);    //Makes the requested PIN as High
 346:	a8 e3       	ldi	r26, 0x38	; 56
 348:	b0 e0       	ldi	r27, 0x00	; 0
 34a:	e8 e3       	ldi	r30, 0x38	; 56
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	48 2f       	mov	r20, r24
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	28 2f       	mov	r18, r24
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 2e       	mov	r0, r18
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_void_SetPinValue+0xaa>
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	0a 94       	dec	r0
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_void_SetPinValue+0xa6>
 368:	84 2b       	or	r24, r20
 36a:	8c 93       	st	X, r24
 36c:	89 c0       	rjmp	.+274    	; 0x480 <DIO_void_SetPinValue+0x1c6>
			
		}else if(PinValue_u8_cpy == DIO_u8_LOW){
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	88 23       	and	r24, r24
 372:	09 f0       	breq	.+2      	; 0x376 <DIO_void_SetPinValue+0xbc>
 374:	85 c0       	rjmp	.+266    	; 0x480 <DIO_void_SetPinValue+0x1c6>
			CLEAR_BIT(PORTB, PinNumber_u8_cpy); //Makes the requested PIn as LOW
 376:	a8 e3       	ldi	r26, 0x38	; 56
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	e8 e3       	ldi	r30, 0x38	; 56
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	48 2f       	mov	r20, r24
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	28 2f       	mov	r18, r24
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	02 2e       	mov	r0, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_void_SetPinValue+0xda>
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	0a 94       	dec	r0
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_void_SetPinValue+0xd6>
 398:	80 95       	com	r24
 39a:	84 23       	and	r24, r20
 39c:	8c 93       	st	X, r24
 39e:	70 c0       	rjmp	.+224    	; 0x480 <DIO_void_SetPinValue+0x1c6>
			
		}
		
	}else if(PinNumber_u8_cpy >= PORTC_START && PinNumber_u8_cpy <= PORTC_END){
 3a0:	89 81       	ldd	r24, Y+1	; 0x01
 3a2:	80 31       	cpi	r24, 0x10	; 16
 3a4:	b0 f1       	brcs	.+108    	; 0x412 <DIO_void_SetPinValue+0x158>
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	88 31       	cpi	r24, 0x18	; 24
 3aa:	98 f5       	brcc	.+102    	; 0x412 <DIO_void_SetPinValue+0x158>
		/* If Pin number is within the PORTC range  */
		
		PinNumber_u8_cpy = PinNumber_u8_cpy - PORTA_SIZE - PORTB_SIZE;   //Descard PORTA & PORTB Sizes to use the PIN within PORTB
 3ac:	89 81       	ldd	r24, Y+1	; 0x01
 3ae:	80 51       	subi	r24, 0x10	; 16
 3b0:	89 83       	std	Y+1, r24	; 0x01
		
		if(PinValue_u8_cpy == DIO_u8_HIGH){
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	a1 f4       	brne	.+40     	; 0x3e0 <DIO_void_SetPinValue+0x126>
			SET_BIT(PORTC, PinNumber_u8_cpy);    //Makes the requested PIN as High
 3b8:	a5 e3       	ldi	r26, 0x35	; 53
 3ba:	b0 e0       	ldi	r27, 0x00	; 0
 3bc:	e5 e3       	ldi	r30, 0x35	; 53
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	48 2f       	mov	r20, r24
 3c4:	89 81       	ldd	r24, Y+1	; 0x01
 3c6:	28 2f       	mov	r18, r24
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 2e       	mov	r0, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_void_SetPinValue+0x11c>
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	0a 94       	dec	r0
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_void_SetPinValue+0x118>
 3da:	84 2b       	or	r24, r20
 3dc:	8c 93       	st	X, r24
 3de:	50 c0       	rjmp	.+160    	; 0x480 <DIO_void_SetPinValue+0x1c6>
			
		}else if(PinValue_u8_cpy == DIO_u8_LOW){
 3e0:	8a 81       	ldd	r24, Y+2	; 0x02
 3e2:	88 23       	and	r24, r24
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <DIO_void_SetPinValue+0x12e>
 3e6:	4c c0       	rjmp	.+152    	; 0x480 <DIO_void_SetPinValue+0x1c6>
			CLEAR_BIT(PORTC, PinNumber_u8_cpy); //Makes the requested PIn as LOW
 3e8:	a5 e3       	ldi	r26, 0x35	; 53
 3ea:	b0 e0       	ldi	r27, 0x00	; 0
 3ec:	e5 e3       	ldi	r30, 0x35	; 53
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	48 2f       	mov	r20, r24
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
 3f6:	28 2f       	mov	r18, r24
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 2e       	mov	r0, r18
 400:	02 c0       	rjmp	.+4      	; 0x406 <DIO_void_SetPinValue+0x14c>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	0a 94       	dec	r0
 408:	e2 f7       	brpl	.-8      	; 0x402 <DIO_void_SetPinValue+0x148>
 40a:	80 95       	com	r24
 40c:	84 23       	and	r24, r20
 40e:	8c 93       	st	X, r24
 410:	37 c0       	rjmp	.+110    	; 0x480 <DIO_void_SetPinValue+0x1c6>
			
		}
		
	}else if(PinNumber_u8_cpy >= PORTD_START && PinNumber_u8_cpy <= PORTD_END){
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	88 31       	cpi	r24, 0x18	; 24
 416:	a0 f1       	brcs	.+104    	; 0x480 <DIO_void_SetPinValue+0x1c6>
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	80 32       	cpi	r24, 0x20	; 32
 41c:	88 f5       	brcc	.+98     	; 0x480 <DIO_void_SetPinValue+0x1c6>
		/* If Pin number is within the PORTC range  */
		
		PinNumber_u8_cpy = PinNumber_u8_cpy - PORTA_SIZE - PORTB_SIZE - PORTC_SIZE;   //Descard PORTA & PORTB & PORTC Sizes to use the PIN within PORTB
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	88 51       	subi	r24, 0x18	; 24
 422:	89 83       	std	Y+1, r24	; 0x01
		
		if(PinValue_u8_cpy == DIO_u8_HIGH){
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	a1 f4       	brne	.+40     	; 0x452 <DIO_void_SetPinValue+0x198>
			SET_BIT(PORTD, PinNumber_u8_cpy);    //Makes the requested PIN as High
 42a:	a2 e3       	ldi	r26, 0x32	; 50
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	e2 e3       	ldi	r30, 0x32	; 50
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	48 2f       	mov	r20, r24
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	28 2f       	mov	r18, r24
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 2e       	mov	r0, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_void_SetPinValue+0x18e>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	0a 94       	dec	r0
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_void_SetPinValue+0x18a>
 44c:	84 2b       	or	r24, r20
 44e:	8c 93       	st	X, r24
 450:	17 c0       	rjmp	.+46     	; 0x480 <DIO_void_SetPinValue+0x1c6>
			
		}else if(PinValue_u8_cpy == DIO_u8_LOW){
 452:	8a 81       	ldd	r24, Y+2	; 0x02
 454:	88 23       	and	r24, r24
 456:	a1 f4       	brne	.+40     	; 0x480 <DIO_void_SetPinValue+0x1c6>
			CLEAR_BIT(PORTD, PinNumber_u8_cpy); //Makes the requested PIn as LOW
 458:	a2 e3       	ldi	r26, 0x32	; 50
 45a:	b0 e0       	ldi	r27, 0x00	; 0
 45c:	e2 e3       	ldi	r30, 0x32	; 50
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	48 2f       	mov	r20, r24
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	28 2f       	mov	r18, r24
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	02 2e       	mov	r0, r18
 470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_void_SetPinValue+0x1bc>
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	0a 94       	dec	r0
 478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_void_SetPinValue+0x1b8>
 47a:	80 95       	com	r24
 47c:	84 23       	and	r24, r20
 47e:	8c 93       	st	X, r24
			
		}
	}
}
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	cf 91       	pop	r28
 486:	df 91       	pop	r29
 488:	08 95       	ret

0000048a <DIO_u8_GetPinValue>:




/* Function that Get a certain PIN Value if it was High or Low */
u8 DIO_u8_GetPinValue(u8 PinNumber_u8_cpy){
 48a:	df 93       	push	r29
 48c:	cf 93       	push	r28
 48e:	00 d0       	rcall	.+0      	; 0x490 <DIO_u8_GetPinValue+0x6>
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
 494:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8_ReturnedPinValue;
	
	/*  Here we check the pin number to find in which range it is      */
	
	if(PinNumber_u8_cpy >= PORTA_START && PinNumber_u8_cpy <=PORTA_END){ 
 496:	8a 81       	ldd	r24, Y+2	; 0x02
 498:	88 30       	cpi	r24, 0x08	; 8
 49a:	90 f4       	brcc	.+36     	; 0x4c0 <DIO_u8_GetPinValue+0x36>
        /* If Pin number is within the PORTA we get it  */
		Loc_u8_ReturnedPinValue = GET_BIT(PINA, PinNumber_u8_cpy);
 49c:	e9 e3       	ldi	r30, 0x39	; 57
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	28 2f       	mov	r18, r24
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	8a 81       	ldd	r24, Y+2	; 0x02
 4a8:	88 2f       	mov	r24, r24
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	a9 01       	movw	r20, r18
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_u8_GetPinValue+0x2a>
 4b0:	55 95       	asr	r21
 4b2:	47 95       	ror	r20
 4b4:	8a 95       	dec	r24
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_u8_GetPinValue+0x26>
 4b8:	ca 01       	movw	r24, r20
 4ba:	81 70       	andi	r24, 0x01	; 1
 4bc:	89 83       	std	Y+1, r24	; 0x01
 4be:	50 c0       	rjmp	.+160    	; 0x560 <DIO_u8_GetPinValue+0xd6>
		
	}else if(PinNumber_u8_cpy >= PORTB_START && PinNumber_u8_cpy <= PORTB_END){
 4c0:	8a 81       	ldd	r24, Y+2	; 0x02
 4c2:	88 30       	cpi	r24, 0x08	; 8
 4c4:	c0 f0       	brcs	.+48     	; 0x4f6 <DIO_u8_GetPinValue+0x6c>
 4c6:	8a 81       	ldd	r24, Y+2	; 0x02
 4c8:	80 31       	cpi	r24, 0x10	; 16
 4ca:	a8 f4       	brcc	.+42     	; 0x4f6 <DIO_u8_GetPinValue+0x6c>
		/* If Pin number is within the PORTB range  */
		
		PinNumber_u8_cpy = PinNumber_u8_cpy - PORTA_SIZE;   //Descard PORTA Size to use the PIN within PORTB
 4cc:	8a 81       	ldd	r24, Y+2	; 0x02
 4ce:	88 50       	subi	r24, 0x08	; 8
 4d0:	8a 83       	std	Y+2, r24	; 0x02
		Loc_u8_ReturnedPinValue = GET_BIT(PINB, PinNumber_u8_cpy);
 4d2:	e6 e3       	ldi	r30, 0x36	; 54
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	28 2f       	mov	r18, r24
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	8a 81       	ldd	r24, Y+2	; 0x02
 4de:	88 2f       	mov	r24, r24
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	a9 01       	movw	r20, r18
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_u8_GetPinValue+0x60>
 4e6:	55 95       	asr	r21
 4e8:	47 95       	ror	r20
 4ea:	8a 95       	dec	r24
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_u8_GetPinValue+0x5c>
 4ee:	ca 01       	movw	r24, r20
 4f0:	81 70       	andi	r24, 0x01	; 1
 4f2:	89 83       	std	Y+1, r24	; 0x01
 4f4:	35 c0       	rjmp	.+106    	; 0x560 <DIO_u8_GetPinValue+0xd6>
		
	}else if(PinNumber_u8_cpy >= PORTC_START && PinNumber_u8_cpy <= PORTC_END){
 4f6:	8a 81       	ldd	r24, Y+2	; 0x02
 4f8:	80 31       	cpi	r24, 0x10	; 16
 4fa:	c0 f0       	brcs	.+48     	; 0x52c <DIO_u8_GetPinValue+0xa2>
 4fc:	8a 81       	ldd	r24, Y+2	; 0x02
 4fe:	88 31       	cpi	r24, 0x18	; 24
 500:	a8 f4       	brcc	.+42     	; 0x52c <DIO_u8_GetPinValue+0xa2>
		/* If Pin number is within the PORTC range  */
		
		PinNumber_u8_cpy = PinNumber_u8_cpy - PORTA_SIZE - PORTB_SIZE;   //Descard PORTA & PORTB Sizes to use the PIN within PORTB
 502:	8a 81       	ldd	r24, Y+2	; 0x02
 504:	80 51       	subi	r24, 0x10	; 16
 506:	8a 83       	std	Y+2, r24	; 0x02
		Loc_u8_ReturnedPinValue = GET_BIT(PINC, PinNumber_u8_cpy);
 508:	e3 e3       	ldi	r30, 0x33	; 51
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	28 2f       	mov	r18, r24
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	8a 81       	ldd	r24, Y+2	; 0x02
 514:	88 2f       	mov	r24, r24
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	a9 01       	movw	r20, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_u8_GetPinValue+0x96>
 51c:	55 95       	asr	r21
 51e:	47 95       	ror	r20
 520:	8a 95       	dec	r24
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_u8_GetPinValue+0x92>
 524:	ca 01       	movw	r24, r20
 526:	81 70       	andi	r24, 0x01	; 1
 528:	89 83       	std	Y+1, r24	; 0x01
 52a:	1a c0       	rjmp	.+52     	; 0x560 <DIO_u8_GetPinValue+0xd6>
		
	}else if(PinNumber_u8_cpy >= PORTD_START && PinNumber_u8_cpy <= PORTD_END){
 52c:	8a 81       	ldd	r24, Y+2	; 0x02
 52e:	88 31       	cpi	r24, 0x18	; 24
 530:	b8 f0       	brcs	.+46     	; 0x560 <DIO_u8_GetPinValue+0xd6>
 532:	8a 81       	ldd	r24, Y+2	; 0x02
 534:	80 32       	cpi	r24, 0x20	; 32
 536:	a0 f4       	brcc	.+40     	; 0x560 <DIO_u8_GetPinValue+0xd6>
		/* If Pin number is within the PORTC range  */
		
		PinNumber_u8_cpy = PinNumber_u8_cpy - PORTA_SIZE - PORTB_SIZE - PORTC_SIZE;   //Descard PORTA & PORTB & PORTC Sizes to use the PIN within PORTB
 538:	8a 81       	ldd	r24, Y+2	; 0x02
 53a:	88 51       	subi	r24, 0x18	; 24
 53c:	8a 83       	std	Y+2, r24	; 0x02
		Loc_u8_ReturnedPinValue = GET_BIT(PIND, PinNumber_u8_cpy);
 53e:	e0 e3       	ldi	r30, 0x30	; 48
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	28 2f       	mov	r18, r24
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	8a 81       	ldd	r24, Y+2	; 0x02
 54a:	88 2f       	mov	r24, r24
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	a9 01       	movw	r20, r18
 550:	02 c0       	rjmp	.+4      	; 0x556 <DIO_u8_GetPinValue+0xcc>
 552:	55 95       	asr	r21
 554:	47 95       	ror	r20
 556:	8a 95       	dec	r24
 558:	e2 f7       	brpl	.-8      	; 0x552 <DIO_u8_GetPinValue+0xc8>
 55a:	ca 01       	movw	r24, r20
 55c:	81 70       	andi	r24, 0x01	; 1
 55e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return Loc_u8_ReturnedPinValue;
 560:	89 81       	ldd	r24, Y+1	; 0x01
}
 562:	0f 90       	pop	r0
 564:	0f 90       	pop	r0
 566:	cf 91       	pop	r28
 568:	df 91       	pop	r29
 56a:	08 95       	ret

0000056c <DIO_void_TooglePin>:




void DIO_void_TooglePin(u8 PinNumber_u8_cpy){
 56c:	df 93       	push	r29
 56e:	cf 93       	push	r28
 570:	0f 92       	push	r0
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	89 83       	std	Y+1, r24	; 0x01
	/*  Here we check the pin number to find in which range it is      */
	
	if(PinNumber_u8_cpy >= PORTA_START && PinNumber_u8_cpy <=PORTA_END){ 
 578:	89 81       	ldd	r24, Y+1	; 0x01
 57a:	88 30       	cpi	r24, 0x08	; 8
 57c:	a0 f4       	brcc	.+40     	; 0x5a6 <DIO_void_TooglePin+0x3a>
        /* If Pin number is within the PORTA we get it  */
		TOGGLE_BIT(PORTA, PinNumber_u8_cpy);
 57e:	ab e3       	ldi	r26, 0x3B	; 59
 580:	b0 e0       	ldi	r27, 0x00	; 0
 582:	eb e3       	ldi	r30, 0x3B	; 59
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	48 2f       	mov	r20, r24
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	28 2f       	mov	r18, r24
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 2e       	mov	r0, r18
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_void_TooglePin+0x30>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	0a 94       	dec	r0
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_void_TooglePin+0x2c>
 5a0:	84 27       	eor	r24, r20
 5a2:	8c 93       	st	X, r24
 5a4:	56 c0       	rjmp	.+172    	; 0x652 <DIO_void_TooglePin+0xe6>
		
	}else if(PinNumber_u8_cpy >= PORTB_START && PinNumber_u8_cpy <= PORTB_END){
 5a6:	89 81       	ldd	r24, Y+1	; 0x01
 5a8:	88 30       	cpi	r24, 0x08	; 8
 5aa:	d0 f0       	brcs	.+52     	; 0x5e0 <DIO_void_TooglePin+0x74>
 5ac:	89 81       	ldd	r24, Y+1	; 0x01
 5ae:	80 31       	cpi	r24, 0x10	; 16
 5b0:	b8 f4       	brcc	.+46     	; 0x5e0 <DIO_void_TooglePin+0x74>
		/* If Pin number is within the PORTB range  */
		
		PinNumber_u8_cpy = PinNumber_u8_cpy - PORTA_SIZE;   //Descard PORTA Size to use the PIN within PORTB
 5b2:	89 81       	ldd	r24, Y+1	; 0x01
 5b4:	88 50       	subi	r24, 0x08	; 8
 5b6:	89 83       	std	Y+1, r24	; 0x01
		TOGGLE_BIT(PORTB, PinNumber_u8_cpy);
 5b8:	a8 e3       	ldi	r26, 0x38	; 56
 5ba:	b0 e0       	ldi	r27, 0x00	; 0
 5bc:	e8 e3       	ldi	r30, 0x38	; 56
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	80 81       	ld	r24, Z
 5c2:	48 2f       	mov	r20, r24
 5c4:	89 81       	ldd	r24, Y+1	; 0x01
 5c6:	28 2f       	mov	r18, r24
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	02 2e       	mov	r0, r18
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_void_TooglePin+0x6a>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	0a 94       	dec	r0
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_void_TooglePin+0x66>
 5da:	84 27       	eor	r24, r20
 5dc:	8c 93       	st	X, r24
 5de:	39 c0       	rjmp	.+114    	; 0x652 <DIO_void_TooglePin+0xe6>
		
	}else if(PinNumber_u8_cpy >= PORTC_START && PinNumber_u8_cpy <= PORTC_END){
 5e0:	89 81       	ldd	r24, Y+1	; 0x01
 5e2:	80 31       	cpi	r24, 0x10	; 16
 5e4:	d0 f0       	brcs	.+52     	; 0x61a <DIO_void_TooglePin+0xae>
 5e6:	89 81       	ldd	r24, Y+1	; 0x01
 5e8:	88 31       	cpi	r24, 0x18	; 24
 5ea:	b8 f4       	brcc	.+46     	; 0x61a <DIO_void_TooglePin+0xae>
		/* If Pin number is within the PORTC range  */
		
		PinNumber_u8_cpy = PinNumber_u8_cpy - PORTA_SIZE - PORTB_SIZE;   //Descard PORTA & PORTB Sizes to use the PIN within PORTB
 5ec:	89 81       	ldd	r24, Y+1	; 0x01
 5ee:	80 51       	subi	r24, 0x10	; 16
 5f0:	89 83       	std	Y+1, r24	; 0x01
		TOGGLE_BIT(PORTC, PinNumber_u8_cpy);
 5f2:	a5 e3       	ldi	r26, 0x35	; 53
 5f4:	b0 e0       	ldi	r27, 0x00	; 0
 5f6:	e5 e3       	ldi	r30, 0x35	; 53
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	48 2f       	mov	r20, r24
 5fe:	89 81       	ldd	r24, Y+1	; 0x01
 600:	28 2f       	mov	r18, r24
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 2e       	mov	r0, r18
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_void_TooglePin+0xa4>
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	0a 94       	dec	r0
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_void_TooglePin+0xa0>
 614:	84 27       	eor	r24, r20
 616:	8c 93       	st	X, r24
 618:	1c c0       	rjmp	.+56     	; 0x652 <DIO_void_TooglePin+0xe6>
		
	}else if(PinNumber_u8_cpy >= PORTD_START && PinNumber_u8_cpy <= PORTD_END){
 61a:	89 81       	ldd	r24, Y+1	; 0x01
 61c:	88 31       	cpi	r24, 0x18	; 24
 61e:	c8 f0       	brcs	.+50     	; 0x652 <DIO_void_TooglePin+0xe6>
 620:	89 81       	ldd	r24, Y+1	; 0x01
 622:	80 32       	cpi	r24, 0x20	; 32
 624:	b0 f4       	brcc	.+44     	; 0x652 <DIO_void_TooglePin+0xe6>
		/* If Pin number is within the PORTC range  */
		
		PinNumber_u8_cpy = PinNumber_u8_cpy - PORTA_SIZE - PORTB_SIZE - PORTC_SIZE;   //Descard PORTA & PORTB & PORTC Sizes to use the PIN within PORTB
 626:	89 81       	ldd	r24, Y+1	; 0x01
 628:	88 51       	subi	r24, 0x18	; 24
 62a:	89 83       	std	Y+1, r24	; 0x01
		TOGGLE_BIT(PORTD, PinNumber_u8_cpy);
 62c:	a2 e3       	ldi	r26, 0x32	; 50
 62e:	b0 e0       	ldi	r27, 0x00	; 0
 630:	e2 e3       	ldi	r30, 0x32	; 50
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	48 2f       	mov	r20, r24
 638:	89 81       	ldd	r24, Y+1	; 0x01
 63a:	28 2f       	mov	r18, r24
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 2e       	mov	r0, r18
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_void_TooglePin+0xde>
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	0a 94       	dec	r0
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_void_TooglePin+0xda>
 64e:	84 27       	eor	r24, r20
 650:	8c 93       	st	X, r24
	}
}
 652:	0f 90       	pop	r0
 654:	cf 91       	pop	r28
 656:	df 91       	pop	r29
 658:	08 95       	ret

0000065a <DIO_void_SetPinDirection>:




/*            Function to change the PIN Direction         */
void DIO_void_SetPinDirection(u8 PinNumber_u8_cpy, u8 PinDirection_u8_cpy){
 65a:	df 93       	push	r29
 65c:	cf 93       	push	r28
 65e:	00 d0       	rcall	.+0      	; 0x660 <DIO_void_SetPinDirection+0x6>
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
 664:	89 83       	std	Y+1, r24	; 0x01
 666:	6a 83       	std	Y+2, r22	; 0x02
	/*  Here we check the pin number to find in which range it is      */
	
	if(PinNumber_u8_cpy >= PORTA_START && PinNumber_u8_cpy <=PORTA_END){ 
 668:	89 81       	ldd	r24, Y+1	; 0x01
 66a:	88 30       	cpi	r24, 0x08	; 8
 66c:	80 f5       	brcc	.+96     	; 0x6ce <DIO_void_SetPinDirection+0x74>
        /* If Pin number is within the PORTA range we check the requested value  */
		
		if(PinDirection_u8_cpy == DIO_u8_OUTPUT){
 66e:	8a 81       	ldd	r24, Y+2	; 0x02
 670:	81 30       	cpi	r24, 0x01	; 1
 672:	a1 f4       	brne	.+40     	; 0x69c <DIO_void_SetPinDirection+0x42>
			SET_BIT(DDRA, PinNumber_u8_cpy);    //Makes the requested PIN as OUTPUT
 674:	aa e3       	ldi	r26, 0x3A	; 58
 676:	b0 e0       	ldi	r27, 0x00	; 0
 678:	ea e3       	ldi	r30, 0x3A	; 58
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	48 2f       	mov	r20, r24
 680:	89 81       	ldd	r24, Y+1	; 0x01
 682:	28 2f       	mov	r18, r24
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	02 2e       	mov	r0, r18
 68c:	02 c0       	rjmp	.+4      	; 0x692 <DIO_void_SetPinDirection+0x38>
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	0a 94       	dec	r0
 694:	e2 f7       	brpl	.-8      	; 0x68e <DIO_void_SetPinDirection+0x34>
 696:	84 2b       	or	r24, r20
 698:	8c 93       	st	X, r24
 69a:	c2 c0       	rjmp	.+388    	; 0x820 <DIO_void_SetPinDirection+0x1c6>
			
		}else if(PinDirection_u8_cpy == DIO_u8_INPUT){
 69c:	8a 81       	ldd	r24, Y+2	; 0x02
 69e:	88 23       	and	r24, r24
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <DIO_void_SetPinDirection+0x4a>
 6a2:	be c0       	rjmp	.+380    	; 0x820 <DIO_void_SetPinDirection+0x1c6>
			CLEAR_BIT(DDRA, PinNumber_u8_cpy); //Makes the requested PIn as INPUT
 6a4:	aa e3       	ldi	r26, 0x3A	; 58
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	ea e3       	ldi	r30, 0x3A	; 58
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 81       	ld	r24, Z
 6ae:	48 2f       	mov	r20, r24
 6b0:	89 81       	ldd	r24, Y+1	; 0x01
 6b2:	28 2f       	mov	r18, r24
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	02 2e       	mov	r0, r18
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <DIO_void_SetPinDirection+0x68>
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	0a 94       	dec	r0
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <DIO_void_SetPinDirection+0x64>
 6c6:	80 95       	com	r24
 6c8:	84 23       	and	r24, r20
 6ca:	8c 93       	st	X, r24
 6cc:	a9 c0       	rjmp	.+338    	; 0x820 <DIO_void_SetPinDirection+0x1c6>
			
		}
		
		
	}else if(PinNumber_u8_cpy >= PORTB_START && PinNumber_u8_cpy <= PORTB_END){
 6ce:	89 81       	ldd	r24, Y+1	; 0x01
 6d0:	88 30       	cpi	r24, 0x08	; 8
 6d2:	b0 f1       	brcs	.+108    	; 0x740 <DIO_void_SetPinDirection+0xe6>
 6d4:	89 81       	ldd	r24, Y+1	; 0x01
 6d6:	80 31       	cpi	r24, 0x10	; 16
 6d8:	98 f5       	brcc	.+102    	; 0x740 <DIO_void_SetPinDirection+0xe6>
		/* If Pin number is within the PORTB range  */
		
		PinNumber_u8_cpy = PinNumber_u8_cpy - PORTA_SIZE;   //Descard PORTA Size to use the PIN within PORTB
 6da:	89 81       	ldd	r24, Y+1	; 0x01
 6dc:	88 50       	subi	r24, 0x08	; 8
 6de:	89 83       	std	Y+1, r24	; 0x01
		
		if(PinDirection_u8_cpy == DIO_u8_OUTPUT){
 6e0:	8a 81       	ldd	r24, Y+2	; 0x02
 6e2:	81 30       	cpi	r24, 0x01	; 1
 6e4:	a1 f4       	brne	.+40     	; 0x70e <DIO_void_SetPinDirection+0xb4>
			SET_BIT(DDRB, PinNumber_u8_cpy);    //Makes the requested PIN as OUTPUT
 6e6:	a7 e3       	ldi	r26, 0x37	; 55
 6e8:	b0 e0       	ldi	r27, 0x00	; 0
 6ea:	e7 e3       	ldi	r30, 0x37	; 55
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	48 2f       	mov	r20, r24
 6f2:	89 81       	ldd	r24, Y+1	; 0x01
 6f4:	28 2f       	mov	r18, r24
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	02 2e       	mov	r0, r18
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_void_SetPinDirection+0xaa>
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	0a 94       	dec	r0
 706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_void_SetPinDirection+0xa6>
 708:	84 2b       	or	r24, r20
 70a:	8c 93       	st	X, r24
 70c:	89 c0       	rjmp	.+274    	; 0x820 <DIO_void_SetPinDirection+0x1c6>
			
		}else if(PinDirection_u8_cpy == DIO_u8_INPUT){
 70e:	8a 81       	ldd	r24, Y+2	; 0x02
 710:	88 23       	and	r24, r24
 712:	09 f0       	breq	.+2      	; 0x716 <DIO_void_SetPinDirection+0xbc>
 714:	85 c0       	rjmp	.+266    	; 0x820 <DIO_void_SetPinDirection+0x1c6>
			CLEAR_BIT(DDRB, PinNumber_u8_cpy); //Makes the requested PIn as INPUT
 716:	a7 e3       	ldi	r26, 0x37	; 55
 718:	b0 e0       	ldi	r27, 0x00	; 0
 71a:	e7 e3       	ldi	r30, 0x37	; 55
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	80 81       	ld	r24, Z
 720:	48 2f       	mov	r20, r24
 722:	89 81       	ldd	r24, Y+1	; 0x01
 724:	28 2f       	mov	r18, r24
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	02 2e       	mov	r0, r18
 72e:	02 c0       	rjmp	.+4      	; 0x734 <DIO_void_SetPinDirection+0xda>
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	0a 94       	dec	r0
 736:	e2 f7       	brpl	.-8      	; 0x730 <DIO_void_SetPinDirection+0xd6>
 738:	80 95       	com	r24
 73a:	84 23       	and	r24, r20
 73c:	8c 93       	st	X, r24
 73e:	70 c0       	rjmp	.+224    	; 0x820 <DIO_void_SetPinDirection+0x1c6>
			
		}
		
	}else if(PinNumber_u8_cpy >= PORTC_START && PinNumber_u8_cpy <= PORTC_END){
 740:	89 81       	ldd	r24, Y+1	; 0x01
 742:	80 31       	cpi	r24, 0x10	; 16
 744:	b0 f1       	brcs	.+108    	; 0x7b2 <DIO_void_SetPinDirection+0x158>
 746:	89 81       	ldd	r24, Y+1	; 0x01
 748:	88 31       	cpi	r24, 0x18	; 24
 74a:	98 f5       	brcc	.+102    	; 0x7b2 <DIO_void_SetPinDirection+0x158>
		/* If Pin number is within the PORTC range  */
		
		PinNumber_u8_cpy = PinNumber_u8_cpy - PORTA_SIZE - PORTB_SIZE;   //Descard PORTA & PORTB Sizes to use the PIN within PORTB
 74c:	89 81       	ldd	r24, Y+1	; 0x01
 74e:	80 51       	subi	r24, 0x10	; 16
 750:	89 83       	std	Y+1, r24	; 0x01
		
		if(PinDirection_u8_cpy == DIO_u8_OUTPUT){
 752:	8a 81       	ldd	r24, Y+2	; 0x02
 754:	81 30       	cpi	r24, 0x01	; 1
 756:	a1 f4       	brne	.+40     	; 0x780 <DIO_void_SetPinDirection+0x126>
			SET_BIT(DDRC, PinNumber_u8_cpy);    //Makes the requested PIN as OUTPUT
 758:	a4 e3       	ldi	r26, 0x34	; 52
 75a:	b0 e0       	ldi	r27, 0x00	; 0
 75c:	e4 e3       	ldi	r30, 0x34	; 52
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
 762:	48 2f       	mov	r20, r24
 764:	89 81       	ldd	r24, Y+1	; 0x01
 766:	28 2f       	mov	r18, r24
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	02 2e       	mov	r0, r18
 770:	02 c0       	rjmp	.+4      	; 0x776 <DIO_void_SetPinDirection+0x11c>
 772:	88 0f       	add	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	0a 94       	dec	r0
 778:	e2 f7       	brpl	.-8      	; 0x772 <DIO_void_SetPinDirection+0x118>
 77a:	84 2b       	or	r24, r20
 77c:	8c 93       	st	X, r24
 77e:	50 c0       	rjmp	.+160    	; 0x820 <DIO_void_SetPinDirection+0x1c6>
			
		}else if(PinDirection_u8_cpy == DIO_u8_INPUT){
 780:	8a 81       	ldd	r24, Y+2	; 0x02
 782:	88 23       	and	r24, r24
 784:	09 f0       	breq	.+2      	; 0x788 <DIO_void_SetPinDirection+0x12e>
 786:	4c c0       	rjmp	.+152    	; 0x820 <DIO_void_SetPinDirection+0x1c6>
			CLEAR_BIT(DDRC, PinNumber_u8_cpy); //Makes the requested PIn as INPUT
 788:	a4 e3       	ldi	r26, 0x34	; 52
 78a:	b0 e0       	ldi	r27, 0x00	; 0
 78c:	e4 e3       	ldi	r30, 0x34	; 52
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	80 81       	ld	r24, Z
 792:	48 2f       	mov	r20, r24
 794:	89 81       	ldd	r24, Y+1	; 0x01
 796:	28 2f       	mov	r18, r24
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	02 2e       	mov	r0, r18
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <DIO_void_SetPinDirection+0x14c>
 7a2:	88 0f       	add	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	0a 94       	dec	r0
 7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <DIO_void_SetPinDirection+0x148>
 7aa:	80 95       	com	r24
 7ac:	84 23       	and	r24, r20
 7ae:	8c 93       	st	X, r24
 7b0:	37 c0       	rjmp	.+110    	; 0x820 <DIO_void_SetPinDirection+0x1c6>
			
		}
		
	}else if(PinNumber_u8_cpy >= PORTD_START && PinNumber_u8_cpy <= PORTD_END){
 7b2:	89 81       	ldd	r24, Y+1	; 0x01
 7b4:	88 31       	cpi	r24, 0x18	; 24
 7b6:	a0 f1       	brcs	.+104    	; 0x820 <DIO_void_SetPinDirection+0x1c6>
 7b8:	89 81       	ldd	r24, Y+1	; 0x01
 7ba:	80 32       	cpi	r24, 0x20	; 32
 7bc:	88 f5       	brcc	.+98     	; 0x820 <DIO_void_SetPinDirection+0x1c6>
		/* If Pin number is within the PORTC range  */
		
		PinNumber_u8_cpy = PinNumber_u8_cpy - PORTA_SIZE - PORTB_SIZE - PORTC_SIZE;   //Descard PORTA & PORTB & PORTC Sizes to use the PIN within PORTB
 7be:	89 81       	ldd	r24, Y+1	; 0x01
 7c0:	88 51       	subi	r24, 0x18	; 24
 7c2:	89 83       	std	Y+1, r24	; 0x01
		
		if(PinDirection_u8_cpy == DIO_u8_OUTPUT){
 7c4:	8a 81       	ldd	r24, Y+2	; 0x02
 7c6:	81 30       	cpi	r24, 0x01	; 1
 7c8:	a1 f4       	brne	.+40     	; 0x7f2 <DIO_void_SetPinDirection+0x198>
			SET_BIT(DDRD, PinNumber_u8_cpy);    //Makes the requested PIN as OUTPUT
 7ca:	a1 e3       	ldi	r26, 0x31	; 49
 7cc:	b0 e0       	ldi	r27, 0x00	; 0
 7ce:	e1 e3       	ldi	r30, 0x31	; 49
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	80 81       	ld	r24, Z
 7d4:	48 2f       	mov	r20, r24
 7d6:	89 81       	ldd	r24, Y+1	; 0x01
 7d8:	28 2f       	mov	r18, r24
 7da:	30 e0       	ldi	r19, 0x00	; 0
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	02 2e       	mov	r0, r18
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <DIO_void_SetPinDirection+0x18e>
 7e4:	88 0f       	add	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	0a 94       	dec	r0
 7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <DIO_void_SetPinDirection+0x18a>
 7ec:	84 2b       	or	r24, r20
 7ee:	8c 93       	st	X, r24
 7f0:	17 c0       	rjmp	.+46     	; 0x820 <DIO_void_SetPinDirection+0x1c6>
			
		}else if(PinDirection_u8_cpy == DIO_u8_INPUT){
 7f2:	8a 81       	ldd	r24, Y+2	; 0x02
 7f4:	88 23       	and	r24, r24
 7f6:	a1 f4       	brne	.+40     	; 0x820 <DIO_void_SetPinDirection+0x1c6>
			CLEAR_BIT(DDRD, PinNumber_u8_cpy); //Makes the requested PIn as INPUT
 7f8:	a1 e3       	ldi	r26, 0x31	; 49
 7fa:	b0 e0       	ldi	r27, 0x00	; 0
 7fc:	e1 e3       	ldi	r30, 0x31	; 49
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	80 81       	ld	r24, Z
 802:	48 2f       	mov	r20, r24
 804:	89 81       	ldd	r24, Y+1	; 0x01
 806:	28 2f       	mov	r18, r24
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	02 2e       	mov	r0, r18
 810:	02 c0       	rjmp	.+4      	; 0x816 <DIO_void_SetPinDirection+0x1bc>
 812:	88 0f       	add	r24, r24
 814:	99 1f       	adc	r25, r25
 816:	0a 94       	dec	r0
 818:	e2 f7       	brpl	.-8      	; 0x812 <DIO_void_SetPinDirection+0x1b8>
 81a:	80 95       	com	r24
 81c:	84 23       	and	r24, r20
 81e:	8c 93       	st	X, r24
			
		}
	}
}
 820:	0f 90       	pop	r0
 822:	0f 90       	pop	r0
 824:	cf 91       	pop	r28
 826:	df 91       	pop	r29
 828:	08 95       	ret

0000082a <GIE_void_enable>:

#include "GIE_int.h"
#include "GIE_config.h"
#include "GIE_priv.h"

void GIE_void_enable(void){
 82a:	df 93       	push	r29
 82c:	cf 93       	push	r28
 82e:	cd b7       	in	r28, 0x3d	; 61
 830:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
 832:	af e5       	ldi	r26, 0x5F	; 95
 834:	b0 e0       	ldi	r27, 0x00	; 0
 836:	ef e5       	ldi	r30, 0x5F	; 95
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	80 81       	ld	r24, Z
 83c:	80 68       	ori	r24, 0x80	; 128
 83e:	8c 93       	st	X, r24
}
 840:	cf 91       	pop	r28
 842:	df 91       	pop	r29
 844:	08 95       	ret

00000846 <GIE_void_disable>:
void GIE_void_disable(void){
 846:	df 93       	push	r29
 848:	cf 93       	push	r28
 84a:	cd b7       	in	r28, 0x3d	; 61
 84c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG, 7);
 84e:	af e5       	ldi	r26, 0x5F	; 95
 850:	b0 e0       	ldi	r27, 0x00	; 0
 852:	ef e5       	ldi	r30, 0x5F	; 95
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 81       	ld	r24, Z
 858:	8f 77       	andi	r24, 0x7F	; 127
 85a:	8c 93       	st	X, r24
 85c:	cf 91       	pop	r28
 85e:	df 91       	pop	r29
 860:	08 95       	ret

00000862 <TIM0_init>:
#include "TIM0_priv.h"


static pf y;
static pf n;
void TIM0_init(){
 862:	df 93       	push	r29
 864:	cf 93       	push	r28
 866:	cd b7       	in	r28, 0x3d	; 61
 868:	de b7       	in	r29, 0x3e	; 62
	TCCR = 0b00000101;
 86a:	e3 e5       	ldi	r30, 0x53	; 83
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	85 e0       	ldi	r24, 0x05	; 5
 870:	80 83       	st	Z, r24
	SET_BIT(TIMSK , 0);
 872:	a9 e5       	ldi	r26, 0x59	; 89
 874:	b0 e0       	ldi	r27, 0x00	; 0
 876:	e9 e5       	ldi	r30, 0x59	; 89
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	80 81       	ld	r24, Z
 87c:	81 60       	ori	r24, 0x01	; 1
 87e:	8c 93       	st	X, r24
	SET_BIT(TIFR ,0);
 880:	a8 e5       	ldi	r26, 0x58	; 88
 882:	b0 e0       	ldi	r27, 0x00	; 0
 884:	e8 e5       	ldi	r30, 0x58	; 88
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	80 81       	ld	r24, Z
 88a:	81 60       	ori	r24, 0x01	; 1
 88c:	8c 93       	st	X, r24
}
 88e:	cf 91       	pop	r28
 890:	df 91       	pop	r29
 892:	08 95       	ret

00000894 <TIM0_enableOverflowinterrupt>:

void TIM0_enableOverflowinterrupt(){
 894:	df 93       	push	r29
 896:	cf 93       	push	r28
 898:	cd b7       	in	r28, 0x3d	; 61
 89a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, 0);
 89c:	a9 e5       	ldi	r26, 0x59	; 89
 89e:	b0 e0       	ldi	r27, 0x00	; 0
 8a0:	e9 e5       	ldi	r30, 0x59	; 89
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	80 81       	ld	r24, Z
 8a6:	81 60       	ori	r24, 0x01	; 1
 8a8:	8c 93       	st	X, r24
}
 8aa:	cf 91       	pop	r28
 8ac:	df 91       	pop	r29
 8ae:	08 95       	ret

000008b0 <TIM0_disbleOverflowinterrupt>:
void TIM0_disbleOverflowinterrupt(){
 8b0:	df 93       	push	r29
 8b2:	cf 93       	push	r28
 8b4:	cd b7       	in	r28, 0x3d	; 61
 8b6:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, 0);
 8b8:	a9 e5       	ldi	r26, 0x59	; 89
 8ba:	b0 e0       	ldi	r27, 0x00	; 0
 8bc:	e9 e5       	ldi	r30, 0x59	; 89
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	80 81       	ld	r24, Z
 8c2:	8e 7f       	andi	r24, 0xFE	; 254
 8c4:	8c 93       	st	X, r24
}
 8c6:	cf 91       	pop	r28
 8c8:	df 91       	pop	r29
 8ca:	08 95       	ret

000008cc <TIM0_SetCallBackOvf>:

void TIM0_SetCallBackOvf(pf x){
 8cc:	df 93       	push	r29
 8ce:	cf 93       	push	r28
 8d0:	00 d0       	rcall	.+0      	; 0x8d2 <TIM0_SetCallBackOvf+0x6>
 8d2:	cd b7       	in	r28, 0x3d	; 61
 8d4:	de b7       	in	r29, 0x3e	; 62
 8d6:	9a 83       	std	Y+2, r25	; 0x02
 8d8:	89 83       	std	Y+1, r24	; 0x01
	y=x;
 8da:	89 81       	ldd	r24, Y+1	; 0x01
 8dc:	9a 81       	ldd	r25, Y+2	; 0x02
 8de:	90 93 6d 00 	sts	0x006D, r25
 8e2:	80 93 6c 00 	sts	0x006C, r24
}
 8e6:	0f 90       	pop	r0
 8e8:	0f 90       	pop	r0
 8ea:	cf 91       	pop	r28
 8ec:	df 91       	pop	r29
 8ee:	08 95       	ret

000008f0 <TIM0_SetCallBack>:

void TIM0_SetCallBack(pf z){
 8f0:	df 93       	push	r29
 8f2:	cf 93       	push	r28
 8f4:	00 d0       	rcall	.+0      	; 0x8f6 <TIM0_SetCallBack+0x6>
 8f6:	cd b7       	in	r28, 0x3d	; 61
 8f8:	de b7       	in	r29, 0x3e	; 62
 8fa:	9a 83       	std	Y+2, r25	; 0x02
 8fc:	89 83       	std	Y+1, r24	; 0x01
	n = z;
 8fe:	89 81       	ldd	r24, Y+1	; 0x01
 900:	9a 81       	ldd	r25, Y+2	; 0x02
 902:	90 93 6f 00 	sts	0x006F, r25
 906:	80 93 6e 00 	sts	0x006E, r24
}
 90a:	0f 90       	pop	r0
 90c:	0f 90       	pop	r0
 90e:	cf 91       	pop	r28
 910:	df 91       	pop	r29
 912:	08 95       	ret

00000914 <__vector_11>:

void __vector_11(void) __attribute__((signal , used));

void __vector_11(void){
 914:	1f 92       	push	r1
 916:	0f 92       	push	r0
 918:	0f b6       	in	r0, 0x3f	; 63
 91a:	0f 92       	push	r0
 91c:	11 24       	eor	r1, r1
 91e:	2f 93       	push	r18
 920:	3f 93       	push	r19
 922:	4f 93       	push	r20
 924:	5f 93       	push	r21
 926:	6f 93       	push	r22
 928:	7f 93       	push	r23
 92a:	8f 93       	push	r24
 92c:	9f 93       	push	r25
 92e:	af 93       	push	r26
 930:	bf 93       	push	r27
 932:	ef 93       	push	r30
 934:	ff 93       	push	r31
 936:	df 93       	push	r29
 938:	cf 93       	push	r28
 93a:	cd b7       	in	r28, 0x3d	; 61
 93c:	de b7       	in	r29, 0x3e	; 62
	y();
 93e:	e0 91 6c 00 	lds	r30, 0x006C
 942:	f0 91 6d 00 	lds	r31, 0x006D
 946:	09 95       	icall
}
 948:	cf 91       	pop	r28
 94a:	df 91       	pop	r29
 94c:	ff 91       	pop	r31
 94e:	ef 91       	pop	r30
 950:	bf 91       	pop	r27
 952:	af 91       	pop	r26
 954:	9f 91       	pop	r25
 956:	8f 91       	pop	r24
 958:	7f 91       	pop	r23
 95a:	6f 91       	pop	r22
 95c:	5f 91       	pop	r21
 95e:	4f 91       	pop	r20
 960:	3f 91       	pop	r19
 962:	2f 91       	pop	r18
 964:	0f 90       	pop	r0
 966:	0f be       	out	0x3f, r0	; 63
 968:	0f 90       	pop	r0
 96a:	1f 90       	pop	r1
 96c:	18 95       	reti

0000096e <TIM0_SetTCNT0>:

void TIM0_SetTCNT0(u8 data){
 96e:	df 93       	push	r29
 970:	cf 93       	push	r28
 972:	0f 92       	push	r0
 974:	cd b7       	in	r28, 0x3d	; 61
 976:	de b7       	in	r29, 0x3e	; 62
 978:	89 83       	std	Y+1, r24	; 0x01
	TCNT = data;
 97a:	e2 e5       	ldi	r30, 0x52	; 82
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	89 81       	ldd	r24, Y+1	; 0x01
 980:	80 83       	st	Z, r24
}
 982:	0f 90       	pop	r0
 984:	cf 91       	pop	r28
 986:	df 91       	pop	r29
 988:	08 95       	ret

0000098a <TIM0_SetOcr>:
void TIM0_SetOcr(u8 data){
 98a:	df 93       	push	r29
 98c:	cf 93       	push	r28
 98e:	0f 92       	push	r0
 990:	cd b7       	in	r28, 0x3d	; 61
 992:	de b7       	in	r29, 0x3e	; 62
 994:	89 83       	std	Y+1, r24	; 0x01
	OCR=data;
 996:	ec e5       	ldi	r30, 0x5C	; 92
 998:	f0 e0       	ldi	r31, 0x00	; 0
 99a:	89 81       	ldd	r24, Y+1	; 0x01
 99c:	80 83       	st	Z, r24
 99e:	0f 90       	pop	r0
 9a0:	cf 91       	pop	r28
 9a2:	df 91       	pop	r29
 9a4:	08 95       	ret

000009a6 <USART_Init>:
/*					 Inputs : void 								*/
/*					 return : void		 						*/
/****************************************************************/

void USART_Init( )
{
 9a6:	df 93       	push	r29
 9a8:	cf 93       	push	r28
 9aa:	00 d0       	rcall	.+0      	; 0x9ac <USART_Init+0x6>
 9ac:	0f 92       	push	r0
 9ae:	cd b7       	in	r28, 0x3d	; 61
 9b0:	de b7       	in	r29, 0x3e	; 62
	u16 LOC_baudEquation = 0 ;
 9b2:	1b 82       	std	Y+3, r1	; 0x03
 9b4:	1a 82       	std	Y+2, r1	; 0x02
	u8  LOC_u8UCSRC_Temp = 0 ;
 9b6:	19 82       	std	Y+1, r1	; 0x01

	/*	Operation mode Synchronous or Asynchronous	*/	
	#if MODE_OF_OPERATION == ASYNCHRONOUS
		CLEAR_BIT(LOC_u8UCSRC_Temp, 6);
 9b8:	89 81       	ldd	r24, Y+1	; 0x01
 9ba:	8f 7b       	andi	r24, 0xBF	; 191
 9bc:	89 83       	std	Y+1, r24	; 0x01
	#endif
	
	
	/*	Parity mode Disabled or Odd or Even 	*/	
	#if PARITY_MODE	== DISABLED
		CLEAR_BIT(LOC_u8UCSRC_Temp, 4 );
 9be:	89 81       	ldd	r24, Y+1	; 0x01
 9c0:	8f 7e       	andi	r24, 0xEF	; 239
 9c2:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT(LOC_u8UCSRC_Temp, 5 );
 9c4:	89 81       	ldd	r24, Y+1	; 0x01
 9c6:	8f 7d       	andi	r24, 0xDF	; 223
 9c8:	89 83       	std	Y+1, r24	; 0x01
	
	/*	Speed mode normal or Double		*/
	#if MODE_OF_OPERATION == ASYNCHRONOUS
	
		if( SPEED_OPERATION	== DOUBLE_SPEED_MODE )    
			SET_BIT(UCSRA, 1);
 9ca:	ab e2       	ldi	r26, 0x2B	; 43
 9cc:	b0 e0       	ldi	r27, 0x00	; 0
 9ce:	eb e2       	ldi	r30, 0x2B	; 43
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	80 81       	ld	r24, Z
 9d4:	82 60       	ori	r24, 0x02	; 2
 9d6:	8c 93       	st	X, r24
	
	#endif
	
	/*  Baud rate Equation	*/
	#if MODE_OF_OPERATION == ASYNCHRONOUS
			if (GET_BIT(UCSRA, 1) == 0) 
 9d8:	eb e2       	ldi	r30, 0x2B	; 43
 9da:	f0 e0       	ldi	r31, 0x00	; 0
 9dc:	80 81       	ld	r24, Z
 9de:	86 95       	lsr	r24
 9e0:	88 2f       	mov	r24, r24
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	81 70       	andi	r24, 0x01	; 1
 9e6:	90 70       	andi	r25, 0x00	; 0
 9e8:	00 97       	sbiw	r24, 0x00	; 0
 9ea:	29 f4       	brne	.+10     	; 0x9f6 <USART_Init+0x50>
			/* Asynchronous Normal Mode */
			LOC_baudEquation = (unsigned int)((F_CPU / (16 * BAUD_RATE)) - 1 );
 9ec:	83 e3       	ldi	r24, 0x33	; 51
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	9b 83       	std	Y+3, r25	; 0x03
 9f2:	8a 83       	std	Y+2, r24	; 0x02
 9f4:	0e c0       	rjmp	.+28     	; 0xa12 <USART_Init+0x6c>
	
			else if (GET_BIT(UCSRA, 1) == 1)
 9f6:	eb e2       	ldi	r30, 0x2B	; 43
 9f8:	f0 e0       	ldi	r31, 0x00	; 0
 9fa:	80 81       	ld	r24, Z
 9fc:	86 95       	lsr	r24
 9fe:	88 2f       	mov	r24, r24
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	81 70       	andi	r24, 0x01	; 1
 a04:	90 70       	andi	r25, 0x00	; 0
 a06:	88 23       	and	r24, r24
 a08:	21 f0       	breq	.+8      	; 0xa12 <USART_Init+0x6c>
			/* Asynchronous Double Speed Mode */
			LOC_baudEquation = (unsigned int)((F_CPU / (8 * BAUD_RATE)) - 1 );
 a0a:	87 e6       	ldi	r24, 0x67	; 103
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	9b 83       	std	Y+3, r25	; 0x03
 a10:	8a 83       	std	Y+2, r24	; 0x02
	
	#endif
	
	
	/* Set baud rate */
	UBRRH = (u8)(LOC_baudEquation>>8);
 a12:	e0 e4       	ldi	r30, 0x40	; 64
 a14:	f0 e0       	ldi	r31, 0x00	; 0
 a16:	8a 81       	ldd	r24, Y+2	; 0x02
 a18:	9b 81       	ldd	r25, Y+3	; 0x03
 a1a:	89 2f       	mov	r24, r25
 a1c:	99 27       	eor	r25, r25
 a1e:	80 83       	st	Z, r24
	UBRRL = (u8)LOC_baudEquation;
 a20:	e9 e2       	ldi	r30, 0x29	; 41
 a22:	f0 e0       	ldi	r31, 0x00	; 0
 a24:	8a 81       	ldd	r24, Y+2	; 0x02
 a26:	80 83       	st	Z, r24
	
	
	/* Enable receiver and transmitter */
	/*UCSRB = (1<<RXEN)|(1<<TXEN);*/
	SET_BIT( UCSRB , 3 );
 a28:	aa e2       	ldi	r26, 0x2A	; 42
 a2a:	b0 e0       	ldi	r27, 0x00	; 0
 a2c:	ea e2       	ldi	r30, 0x2A	; 42
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	80 81       	ld	r24, Z
 a32:	88 60       	ori	r24, 0x08	; 8
 a34:	8c 93       	st	X, r24
	SET_BIT( UCSRB , 4 );
 a36:	aa e2       	ldi	r26, 0x2A	; 42
 a38:	b0 e0       	ldi	r27, 0x00	; 0
 a3a:	ea e2       	ldi	r30, 0x2A	; 42
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	80 81       	ld	r24, Z
 a40:	80 61       	ori	r24, 0x10	; 16
 a42:	8c 93       	st	X, r24
		CLEAR_BIT( LOC_u8UCSRC_Temp , 1 );
		SET_BIT( LOC_u8UCSRC_Temp , 2 );
		CLEAR_BIT( UCSRB , 2 );
		
	#elif FRAME_SIZE == 8
		SET_BIT( LOC_u8UCSRC_Temp , 1 );
 a44:	89 81       	ldd	r24, Y+1	; 0x01
 a46:	82 60       	ori	r24, 0x02	; 2
 a48:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT( LOC_u8UCSRC_Temp , 2 );
 a4a:	89 81       	ldd	r24, Y+1	; 0x01
 a4c:	84 60       	ori	r24, 0x04	; 4
 a4e:	89 83       	std	Y+1, r24	; 0x01
		CLEAR_BIT( UCSRB , 2 );
 a50:	aa e2       	ldi	r26, 0x2A	; 42
 a52:	b0 e0       	ldi	r27, 0x00	; 0
 a54:	ea e2       	ldi	r30, 0x2A	; 42
 a56:	f0 e0       	ldi	r31, 0x00	; 0
 a58:	80 81       	ld	r24, Z
 a5a:	8b 7f       	andi	r24, 0xFB	; 251
 a5c:	8c 93       	st	X, r24
		
	#endif

	/* Set frame format: 8-Bits data */
	/*	 Character Size 8-Bits	*/
	SET_BIT( LOC_u8UCSRC_Temp , 1 );
 a5e:	89 81       	ldd	r24, Y+1	; 0x01
 a60:	82 60       	ori	r24, 0x02	; 2
 a62:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT( LOC_u8UCSRC_Temp , 2 );
 a64:	89 81       	ldd	r24, Y+1	; 0x01
 a66:	84 60       	ori	r24, 0x04	; 4
 a68:	89 83       	std	Y+1, r24	; 0x01

	/*	Stop bit select number One or Two Bits */	
	#if STOP_BIT_SELECT	== TWO_BIT
			SET_BIT( LOC_u8UCSRC_Temp , 3 );
 a6a:	89 81       	ldd	r24, Y+1	; 0x01
 a6c:	88 60       	ori	r24, 0x08	; 8
 a6e:	89 83       	std	Y+1, r24	; 0x01

	/*  clock polarity	*/
	#if MODE_OF_OPERATION == SYNCHRONOUS
	
		#if CLOCK_POLARITY	== RISING
			CLEAR_BIT( LOC_u8UCSRC_Temp , 0 );
 a70:	89 81       	ldd	r24, Y+1	; 0x01
 a72:	8e 7f       	andi	r24, 0xFE	; 254
 a74:	89 83       	std	Y+1, r24	; 0x01
/*							the UBRRH Register.					*/
/*				It is read as one when reading UCSRC.			*/
/*				The URSEL must be one when writing the UCSRC.	*/
/****************************************************************/

	SET_BIT( LOC_u8UCSRC_Temp , 7 );
 a76:	89 81       	ldd	r24, Y+1	; 0x01
 a78:	80 68       	ori	r24, 0x80	; 128
 a7a:	89 83       	std	Y+1, r24	; 0x01
/** !comment :    UCSRC  : USART control and status Registe		*/
/** 		  	Force Acesses to UCSRC Register because sharing */
/*				the	same I/O location with UBBRH.				*/
/****************************************************************/

	UCSRC = LOC_u8UCSRC_Temp ;
 a7c:	e0 e4       	ldi	r30, 0x40	; 64
 a7e:	f0 e0       	ldi	r31, 0x00	; 0
 a80:	89 81       	ldd	r24, Y+1	; 0x01
 a82:	80 83       	st	Z, r24



}
 a84:	0f 90       	pop	r0
 a86:	0f 90       	pop	r0
 a88:	0f 90       	pop	r0
 a8a:	cf 91       	pop	r28
 a8c:	df 91       	pop	r29
 a8e:	08 95       	ret

00000a90 <USART_Transmit>:
/****************************************************************/
/* Pre_condition  :  this function must be used after USART		*/
/*     				 initialized 							    */
/****************************************************************/
void USART_Transmit( u8 data )
{
 a90:	df 93       	push	r29
 a92:	cf 93       	push	r28
 a94:	0f 92       	push	r0
 a96:	cd b7       	in	r28, 0x3d	; 61
 a98:	de b7       	in	r29, 0x3e	; 62
 a9a:	89 83       	std	Y+1, r24	; 0x01
	
	/* Wait for empty transmit buffer */
	while( GET_BIT(UCSRA,5) == 0 );
 a9c:	eb e2       	ldi	r30, 0x2B	; 43
 a9e:	f0 e0       	ldi	r31, 0x00	; 0
 aa0:	80 81       	ld	r24, Z
 aa2:	82 95       	swap	r24
 aa4:	86 95       	lsr	r24
 aa6:	87 70       	andi	r24, 0x07	; 7
 aa8:	88 2f       	mov	r24, r24
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	81 70       	andi	r24, 0x01	; 1
 aae:	90 70       	andi	r25, 0x00	; 0
 ab0:	00 97       	sbiw	r24, 0x00	; 0
 ab2:	a1 f3       	breq	.-24     	; 0xa9c <USART_Transmit+0xc>
	
	/*	while ( !( UCSRA & (1<<UDRE)) );	*/
	
	/* Put data into buffer, sends the data */
	UDR = data;
 ab4:	ec e2       	ldi	r30, 0x2C	; 44
 ab6:	f0 e0       	ldi	r31, 0x00	; 0
 ab8:	89 81       	ldd	r24, Y+1	; 0x01
 aba:	80 83       	st	Z, r24

}
 abc:	0f 90       	pop	r0
 abe:	cf 91       	pop	r28
 ac0:	df 91       	pop	r29
 ac2:	08 95       	ret

00000ac4 <USART_TransmitString>:
/****************************************************************/
/* Pre_condition  :  this function must be used after USART		*/
/*     				 initialized 							    */
/****************************************************************/
void USART_TransmitString( u8 *s )
{
 ac4:	df 93       	push	r29
 ac6:	cf 93       	push	r28
 ac8:	00 d0       	rcall	.+0      	; 0xaca <USART_TransmitString+0x6>
 aca:	00 d0       	rcall	.+0      	; 0xacc <USART_TransmitString+0x8>
 acc:	cd b7       	in	r28, 0x3d	; 61
 ace:	de b7       	in	r29, 0x3e	; 62
 ad0:	9c 83       	std	Y+4, r25	; 0x04
 ad2:	8b 83       	std	Y+3, r24	; 0x03
	unsigned int i=0;
 ad4:	1a 82       	std	Y+2, r1	; 0x02
 ad6:	19 82       	std	Y+1, r1	; 0x01
 ad8:	10 c0       	rjmp	.+32     	; 0xafa <USART_TransmitString+0x36>
	   while (s[i] != '\x0')
	   {
		   USART_Transmit(s[i++]);
 ada:	2b 81       	ldd	r18, Y+3	; 0x03
 adc:	3c 81       	ldd	r19, Y+4	; 0x04
 ade:	89 81       	ldd	r24, Y+1	; 0x01
 ae0:	9a 81       	ldd	r25, Y+2	; 0x02
 ae2:	f9 01       	movw	r30, r18
 ae4:	e8 0f       	add	r30, r24
 ae6:	f9 1f       	adc	r31, r25
 ae8:	20 81       	ld	r18, Z
 aea:	89 81       	ldd	r24, Y+1	; 0x01
 aec:	9a 81       	ldd	r25, Y+2	; 0x02
 aee:	01 96       	adiw	r24, 0x01	; 1
 af0:	9a 83       	std	Y+2, r25	; 0x02
 af2:	89 83       	std	Y+1, r24	; 0x01
 af4:	82 2f       	mov	r24, r18
 af6:	0e 94 48 05 	call	0xa90	; 0xa90 <USART_Transmit>
/*     				 initialized 							    */
/****************************************************************/
void USART_TransmitString( u8 *s )
{
	unsigned int i=0;
	   while (s[i] != '\x0')
 afa:	2b 81       	ldd	r18, Y+3	; 0x03
 afc:	3c 81       	ldd	r19, Y+4	; 0x04
 afe:	89 81       	ldd	r24, Y+1	; 0x01
 b00:	9a 81       	ldd	r25, Y+2	; 0x02
 b02:	f9 01       	movw	r30, r18
 b04:	e8 0f       	add	r30, r24
 b06:	f9 1f       	adc	r31, r25
 b08:	80 81       	ld	r24, Z
 b0a:	88 23       	and	r24, r24
 b0c:	31 f7       	brne	.-52     	; 0xada <USART_TransmitString+0x16>
	   {
		   USART_Transmit(s[i++]);
	   }
}
 b0e:	0f 90       	pop	r0
 b10:	0f 90       	pop	r0
 b12:	0f 90       	pop	r0
 b14:	0f 90       	pop	r0
 b16:	cf 91       	pop	r28
 b18:	df 91       	pop	r29
 b1a:	08 95       	ret

00000b1c <USART_Receive>:
/****************************************************************/
/* Pre_condition  :  this function must be used after USART		*/
/*     				 initialized 							    */
/****************************************************************/
u8 USART_Receive( )
{
 b1c:	df 93       	push	r29
 b1e:	cf 93       	push	r28
 b20:	cd b7       	in	r28, 0x3d	; 61
 b22:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	while( GET_BIT( UCSRA , 7 ) ==0 );
 b24:	eb e2       	ldi	r30, 0x2B	; 43
 b26:	f0 e0       	ldi	r31, 0x00	; 0
 b28:	80 81       	ld	r24, Z
 b2a:	88 23       	and	r24, r24
 b2c:	dc f7       	brge	.-10     	; 0xb24 <USART_Receive+0x8>
	
	/*while ( !(UCSRA & (1<<RXC)) );*/
	
	/* Get and return received data from buffer */
	return UDR;
 b2e:	ec e2       	ldi	r30, 0x2C	; 44
 b30:	f0 e0       	ldi	r31, 0x00	; 0
 b32:	80 81       	ld	r24, Z
}
 b34:	cf 91       	pop	r28
 b36:	df 91       	pop	r29
 b38:	08 95       	ret

00000b3a <delnms>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void delnms(u16 n)
{
 b3a:	df 93       	push	r29
 b3c:	cf 93       	push	r28
 b3e:	00 d0       	rcall	.+0      	; 0xb40 <delnms+0x6>
 b40:	00 d0       	rcall	.+0      	; 0xb42 <delnms+0x8>
 b42:	00 d0       	rcall	.+0      	; 0xb44 <delnms+0xa>
 b44:	cd b7       	in	r28, 0x3d	; 61
 b46:	de b7       	in	r29, 0x3e	; 62
 b48:	9c 83       	std	Y+4, r25	; 0x04
 b4a:	8b 83       	std	Y+3, r24	; 0x03
 b4c:	13 c0       	rjmp	.+38     	; 0xb74 <delnms+0x3a>
	//delay n ms
	u16 x;

	while(n--)
	{
		x=2600;       //empirically determined fudge factor 16mhz
 b4e:	88 e2       	ldi	r24, 0x28	; 40
 b50:	9a e0       	ldi	r25, 0x0A	; 10
 b52:	9a 83       	std	Y+2, r25	; 0x02
 b54:	89 83       	std	Y+1, r24	; 0x01
		while(x--);
 b56:	1e 82       	std	Y+6, r1	; 0x06
 b58:	89 81       	ldd	r24, Y+1	; 0x01
 b5a:	9a 81       	ldd	r25, Y+2	; 0x02
 b5c:	00 97       	sbiw	r24, 0x00	; 0
 b5e:	11 f0       	breq	.+4      	; 0xb64 <delnms+0x2a>
 b60:	81 e0       	ldi	r24, 0x01	; 1
 b62:	8e 83       	std	Y+6, r24	; 0x06
 b64:	89 81       	ldd	r24, Y+1	; 0x01
 b66:	9a 81       	ldd	r25, Y+2	; 0x02
 b68:	01 97       	sbiw	r24, 0x01	; 1
 b6a:	9a 83       	std	Y+2, r25	; 0x02
 b6c:	89 83       	std	Y+1, r24	; 0x01
 b6e:	8e 81       	ldd	r24, Y+6	; 0x06
 b70:	88 23       	and	r24, r24
 b72:	89 f7       	brne	.-30     	; 0xb56 <delnms+0x1c>
void delnms(u16 n)
{
	//delay n ms
	u16 x;

	while(n--)
 b74:	1d 82       	std	Y+5, r1	; 0x05
 b76:	8b 81       	ldd	r24, Y+3	; 0x03
 b78:	9c 81       	ldd	r25, Y+4	; 0x04
 b7a:	00 97       	sbiw	r24, 0x00	; 0
 b7c:	11 f0       	breq	.+4      	; 0xb82 <delnms+0x48>
 b7e:	81 e0       	ldi	r24, 0x01	; 1
 b80:	8d 83       	std	Y+5, r24	; 0x05
 b82:	8b 81       	ldd	r24, Y+3	; 0x03
 b84:	9c 81       	ldd	r25, Y+4	; 0x04
 b86:	01 97       	sbiw	r24, 0x01	; 1
 b88:	9c 83       	std	Y+4, r25	; 0x04
 b8a:	8b 83       	std	Y+3, r24	; 0x03
 b8c:	8d 81       	ldd	r24, Y+5	; 0x05
 b8e:	88 23       	and	r24, r24
 b90:	f1 f6       	brne	.-68     	; 0xb4e <delnms+0x14>
	{
		x=2600;       //empirically determined fudge factor 16mhz
		while(x--);
	}
}
 b92:	26 96       	adiw	r28, 0x06	; 6
 b94:	0f b6       	in	r0, 0x3f	; 63
 b96:	f8 94       	cli
 b98:	de bf       	out	0x3e, r29	; 62
 b9a:	0f be       	out	0x3f, r0	; 63
 b9c:	cd bf       	out	0x3d, r28	; 61
 b9e:	cf 91       	pop	r28
 ba0:	df 91       	pop	r29
 ba2:	08 95       	ret

00000ba4 <main>:

int main(void)
{
 ba4:	df 93       	push	r29
 ba6:	cf 93       	push	r28
 ba8:	00 d0       	rcall	.+0      	; 0xbaa <main+0x6>
 baa:	00 d0       	rcall	.+0      	; 0xbac <main+0x8>
 bac:	00 d0       	rcall	.+0      	; 0xbae <main+0xa>
 bae:	cd b7       	in	r28, 0x3d	; 61
 bb0:	de b7       	in	r29, 0x3e	; 62
	DIO_void_Intialization();
 bb2:	0e 94 46 01 	call	0x28c	; 0x28c <DIO_void_Intialization>
	GIE_void_enable();
 bb6:	0e 94 15 04 	call	0x82a	; 0x82a <GIE_void_enable>
	USART_Init();
 bba:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <USART_Init>
	ADC_voidInit();
 bbe:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
	ADC_voidEnable();
 bc2:	0e 94 b9 00 	call	0x172	; 0x172 <ADC_voidEnable>

	u8 *s ;
	u16 i=0,Human_Resistance;
 bc6:	1c 82       	std	Y+4, r1	; 0x04
 bc8:	1b 82       	std	Y+3, r1	; 0x03


	while(1)
	{

		i=ADC_u16ReadADC();
 bca:	0e 94 14 01 	call	0x228	; 0x228 <ADC_u16ReadADC>
 bce:	9c 83       	std	Y+4, r25	; 0x04
 bd0:	8b 83       	std	Y+3, r24	; 0x03

		Human_Resistance = (((2*i)+1024)*10)/(512-i);
 bd2:	8b 81       	ldd	r24, Y+3	; 0x03
 bd4:	9c 81       	ldd	r25, Y+4	; 0x04
 bd6:	9c 01       	movw	r18, r24
 bd8:	22 0f       	add	r18, r18
 bda:	33 1f       	adc	r19, r19
 bdc:	22 0f       	add	r18, r18
 bde:	33 1f       	adc	r19, r19
 be0:	c9 01       	movw	r24, r18
 be2:	88 0f       	add	r24, r24
 be4:	99 1f       	adc	r25, r25
 be6:	88 0f       	add	r24, r24
 be8:	99 1f       	adc	r25, r25
 bea:	82 0f       	add	r24, r18
 bec:	93 1f       	adc	r25, r19
 bee:	ac 01       	movw	r20, r24
 bf0:	40 50       	subi	r20, 0x00	; 0
 bf2:	58 4d       	sbci	r21, 0xD8	; 216
 bf4:	20 e0       	ldi	r18, 0x00	; 0
 bf6:	32 e0       	ldi	r19, 0x02	; 2
 bf8:	8b 81       	ldd	r24, Y+3	; 0x03
 bfa:	9c 81       	ldd	r25, Y+4	; 0x04
 bfc:	28 1b       	sub	r18, r24
 bfe:	39 0b       	sbc	r19, r25
 c00:	ca 01       	movw	r24, r20
 c02:	b9 01       	movw	r22, r18
 c04:	0e 94 2a 06 	call	0xc54	; 0xc54 <__udivmodhi4>
 c08:	cb 01       	movw	r24, r22
 c0a:	9a 83       	std	Y+2, r25	; 0x02
 c0c:	89 83       	std	Y+1, r24	; 0x01

		USART_TransmitString(itoa(i,s,10));
 c0e:	8b 81       	ldd	r24, Y+3	; 0x03
 c10:	9c 81       	ldd	r25, Y+4	; 0x04
 c12:	2d 81       	ldd	r18, Y+5	; 0x05
 c14:	3e 81       	ldd	r19, Y+6	; 0x06
 c16:	b9 01       	movw	r22, r18
 c18:	4a e0       	ldi	r20, 0x0A	; 10
 c1a:	50 e0       	ldi	r21, 0x00	; 0
 c1c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <itoa>
 c20:	0e 94 62 05 	call	0xac4	; 0xac4 <USART_TransmitString>
		USART_TransmitString("==> ");
 c24:	80 e6       	ldi	r24, 0x60	; 96
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	0e 94 62 05 	call	0xac4	; 0xac4 <USART_TransmitString>

		USART_TransmitString(itoa(Human_Resistance,s,10));
 c2c:	89 81       	ldd	r24, Y+1	; 0x01
 c2e:	9a 81       	ldd	r25, Y+2	; 0x02
 c30:	2d 81       	ldd	r18, Y+5	; 0x05
 c32:	3e 81       	ldd	r19, Y+6	; 0x06
 c34:	b9 01       	movw	r22, r18
 c36:	4a e0       	ldi	r20, 0x0A	; 10
 c38:	50 e0       	ldi	r21, 0x00	; 0
 c3a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <itoa>
 c3e:	0e 94 62 05 	call	0xac4	; 0xac4 <USART_TransmitString>
		USART_TransmitString(" Kohm\n");
 c42:	85 e6       	ldi	r24, 0x65	; 101
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	0e 94 62 05 	call	0xac4	; 0xac4 <USART_TransmitString>

		delnms(50);
 c4a:	82 e3       	ldi	r24, 0x32	; 50
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <delnms>
 c52:	bb cf       	rjmp	.-138    	; 0xbca <main+0x26>

00000c54 <__udivmodhi4>:
 c54:	aa 1b       	sub	r26, r26
 c56:	bb 1b       	sub	r27, r27
 c58:	51 e1       	ldi	r21, 0x11	; 17
 c5a:	07 c0       	rjmp	.+14     	; 0xc6a <__udivmodhi4_ep>

00000c5c <__udivmodhi4_loop>:
 c5c:	aa 1f       	adc	r26, r26
 c5e:	bb 1f       	adc	r27, r27
 c60:	a6 17       	cp	r26, r22
 c62:	b7 07       	cpc	r27, r23
 c64:	10 f0       	brcs	.+4      	; 0xc6a <__udivmodhi4_ep>
 c66:	a6 1b       	sub	r26, r22
 c68:	b7 0b       	sbc	r27, r23

00000c6a <__udivmodhi4_ep>:
 c6a:	88 1f       	adc	r24, r24
 c6c:	99 1f       	adc	r25, r25
 c6e:	5a 95       	dec	r21
 c70:	a9 f7       	brne	.-22     	; 0xc5c <__udivmodhi4_loop>
 c72:	80 95       	com	r24
 c74:	90 95       	com	r25
 c76:	bc 01       	movw	r22, r24
 c78:	cd 01       	movw	r24, r26
 c7a:	08 95       	ret

00000c7c <itoa>:
 c7c:	fb 01       	movw	r30, r22
 c7e:	9f 01       	movw	r18, r30
 c80:	e8 94       	clt
 c82:	42 30       	cpi	r20, 0x02	; 2
 c84:	c4 f0       	brlt	.+48     	; 0xcb6 <itoa+0x3a>
 c86:	45 32       	cpi	r20, 0x25	; 37
 c88:	b4 f4       	brge	.+44     	; 0xcb6 <itoa+0x3a>
 c8a:	4a 30       	cpi	r20, 0x0A	; 10
 c8c:	29 f4       	brne	.+10     	; 0xc98 <itoa+0x1c>
 c8e:	97 fb       	bst	r25, 7
 c90:	1e f4       	brtc	.+6      	; 0xc98 <itoa+0x1c>
 c92:	90 95       	com	r25
 c94:	81 95       	neg	r24
 c96:	9f 4f       	sbci	r25, 0xFF	; 255
 c98:	64 2f       	mov	r22, r20
 c9a:	77 27       	eor	r23, r23
 c9c:	0e 94 2a 06 	call	0xc54	; 0xc54 <__udivmodhi4>
 ca0:	80 5d       	subi	r24, 0xD0	; 208
 ca2:	8a 33       	cpi	r24, 0x3A	; 58
 ca4:	0c f0       	brlt	.+2      	; 0xca8 <itoa+0x2c>
 ca6:	89 5d       	subi	r24, 0xD9	; 217
 ca8:	81 93       	st	Z+, r24
 caa:	cb 01       	movw	r24, r22
 cac:	00 97       	sbiw	r24, 0x00	; 0
 cae:	a1 f7       	brne	.-24     	; 0xc98 <itoa+0x1c>
 cb0:	16 f4       	brtc	.+4      	; 0xcb6 <itoa+0x3a>
 cb2:	5d e2       	ldi	r21, 0x2D	; 45
 cb4:	51 93       	st	Z+, r21
 cb6:	10 82       	st	Z, r1
 cb8:	c9 01       	movw	r24, r18
 cba:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <strrev>

00000cbe <strrev>:
 cbe:	dc 01       	movw	r26, r24
 cc0:	fc 01       	movw	r30, r24
 cc2:	67 2f       	mov	r22, r23
 cc4:	71 91       	ld	r23, Z+
 cc6:	77 23       	and	r23, r23
 cc8:	e1 f7       	brne	.-8      	; 0xcc2 <strrev+0x4>
 cca:	32 97       	sbiw	r30, 0x02	; 2
 ccc:	04 c0       	rjmp	.+8      	; 0xcd6 <strrev+0x18>
 cce:	7c 91       	ld	r23, X
 cd0:	6d 93       	st	X+, r22
 cd2:	70 83       	st	Z, r23
 cd4:	62 91       	ld	r22, -Z
 cd6:	ae 17       	cp	r26, r30
 cd8:	bf 07       	cpc	r27, r31
 cda:	c8 f3       	brcs	.-14     	; 0xcce <strrev+0x10>
 cdc:	08 95       	ret

00000cde <_exit>:
 cde:	f8 94       	cli

00000ce0 <__stop_program>:
 ce0:	ff cf       	rjmp	.-2      	; 0xce0 <__stop_program>
